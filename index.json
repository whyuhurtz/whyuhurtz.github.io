
[{"content":" ü§ô Yo, wassup. # üë®üèª‚Äçüíª Whoami # Currently, I\u0026rsquo;ve been studied Multimedia and Network Engineering at State Polytechnic of Jakarta (known as PNJ). I\u0026rsquo;m very passionate to managing and maintaining servers, especially a Linux server with Debian-based or Red Hat-based distibutions üêß. In my free time at weekend, I usually join CTF games either solo or with my teammate to sharpening my hacking skills üëæ. Simply, CTF is a cyber security contest with 3 types (jeopardy, attack-defense, or mixed) and various categories. I mostly handled web exploitation and binary exploitation categories (sometimes also reverse) ü¶æ.\nüíª Tech Stack # Langs: Óù† Bash Óù± C Û∞å† Python Û∞¨∑ Java Óòß Go Óû§ MongoDB ÓúÑ MySQL Web Frameworks: Óüï FastAPI Óüú Flask Óúù Django üõ†Ô∏è Toolkit # üíº Intenship Experiences # \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\rwork-case-filled\rPT Kinema Systrans Multimedia (Infinite Learning Indonesia) 08/2024 - 12/2024 Batam | IBM Hybrid Cloud and Red Hat Program | 4 months Download internship certificate As part of the IBM Hybrid Cloud and Red Hat Program, foundational knowledge of Linux system administration was acquired through RH124 and RH134 modules. In addition, several collaborative projects were completed, including containerized application deployment and centralized logging with Wazuh. Finally, the Red Hat Certified System Administrator (RHCSA) exam was passed with a perfect score. \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\rPT IP Network Solusindo 09/2021 - 05/2022 Central Jakarta | IT Support | 9 months Download internship certificate During the internship at PT IP Network Solusindo, hands-on experience was gained in configuring various network devices, managing virtual machines, automating MySQL replication with ClusterControl, and performing data backup and restoration on Windows and Linux servers using Veeam. üìù Projects # \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e iot--platform LokaSync 2025 Industry project | Lokatani | 5 months Categories: IoT Front-end Back-end Tech stack: Óüï FastAPI Û∞úà ReactJS Óû§ MongoDB Û∞•ß Firebase LokaSync/LokaSync An auto firmware update solution for your ESP devices through over-the-air (remotely). TypeScript 1 0 \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\rcilogs 2024 Industry project | Infinite Learning Indonesia | 2 weeks Categories: Sysadmin Tech stack: Û±Ñõ RHEL Óù† Bash Û∞íÉ Wazuh whyuhurtz/cilogs A simple shell script to automate centralizing log server process. Powered by Wazuh to prevent the server-side attacks. Shell 0 0 \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\rSaFeTP 2024 College project | PNJ | 1 week Categories: Sysadmin Tech stack: Óù† Bash whyuhurtz/SaFeTP Proyek Shell Scripting dan Jaringan Server (Semester 4). Shell 0 0 More projects... üèÜ Achievements and Organizations # \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\rcertificate_fill\rCyber Security Mentor in Computer Student Club 03/2024 - 08/2025 State Polytechnic of Jakarta (PNJ) | 6 months Download certificate Teaching about basic web application hacking phases, from reconnaissance to reporting web vulnerabilities (more technical explanations). Some of exploitation techniques that I teach, such as XSS, SQL injection, CSRF, SSRF, etc. I also helped the new members to get to know more about the Capture The Flag (CTF) competition. In essence, I equip new members with a web penetration testing experience so that they can do bug bounties independently. \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\rCyberApocalypse CTF 03/2025 HackTheBox I was successfully solved 5 CTF challenges, which are are: (2) Web Exploit, (2) Reverse, and (1) Pwn. Hopefully can make a solid CTF teams in the future. ‚öîÔ∏è Read the writeup \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\rSlashroot 8 CTF 11/2024 ITB Stikom Bali Download certificate I was successfully solved 7 CTF challenges and gained 13th position. Overall, challenges are at a medium level for me. Hopefully, I can make better score in the next event. üéØÔ∏è Read the writeup (Bahasa) \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\r2nd Place on KMIPN 5 CTF Categories 2023 Bakorma | 4 days Download certificate The qualification is held online with about 100 questions related to Cyber Security and Network Security. Then, the final is held offline at PENS campus. Alhamdulillah, I with my team, which is 05-Council was got runner up position. I'm able to solve Web Exploitation challenges, such as Local File Inclusion, SQL Injection attacks, and more. üö© Read jeopardy writeup üõ°Ô∏è Read attack-defense writeup üìÉ Certifications # \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\rcertificate_fill\rRed Hat Certified System Administrator 12/2024 - 12/2027 Red Hat, Inc. Verify the certificate \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\rcertificate_fill\rNetwork Defense Essentials v1 06/2024 - 06/2027 EC-Council Verify the certificate \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\rcertificate_fill\rBug Bounty Hunting Bootcamp 05/2024 - 05/2027 ID Networkers Verify the certificate \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\rcertificate_fill\rGoogle IT Support 02/2023 Coursera Verify the certificate üìú Download CV # Download my CV if you want to know more details about all of my experiences and certifications that I\u0026rsquo;ve been done.\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\rCV ATS Wahyu Priambodo üôèüèª Thank\u0026rsquo;s.\n","date":"11 July 2025","externalUrl":null,"permalink":"/about/","section":"Home Page","summary":"","title":"üò¥ About Me","type":"page"},{"content":" ","date":"11 July 2025","externalUrl":null,"permalink":"/","section":"Home Page","summary":"","title":"Home Page","type":"page"},{"content":" 1. LokaSync # Categories: IoT Front-end Back-end Tech stack: Óüï FastAPI Û∞úà ReactJS Óû§ MongoDB Û∞•ß Firebase LokaSync/LokaSync An auto firmware update solution for your ESP devices through over-the-air (remotely). TypeScript 1 0 2. Redesign Polines Web to Mobile App # Categories: Mobile Development Tech stack: Óüù Flutter whyuhurtz/polines_app An Android Application that focuses on redesigning the official website of the State Polytechnic of Semarang (Polines). Dart 0 0 3. Ammonia Gas (NH3) Detection # Categories: IoT Tech stack: Óüú Flask whyuhurtz/Ammonia-Detection Ammonia detection (NH3) using ESP32 and MQ-135. The simulation is running inside VSCode with Wokwi and PlatformIO extensions. C 0 1 4. cilogs (Centralized Log Server Solution) # Categories: Sysadmin Tech stack: Óù† Bash whyuhurtz/cilogs A simple shell script to automate centralizing log server process. Powered by Wazuh to prevent the server-side attacks. Shell 0 0 5. Simple Group Portfolio Design # Categories: Front-end Tech stack: Û∞åù HTML Óùâ CSS ÔãÆ JS whyuhurtz/il-group-portfolio A simple website to introduce our team in the IBM HCRH Batch 7 - Infinite Learning Indonesia. HTML 0 0 6. SaFeTP # Categories: Sysadmin Tech stack: Óù† Bash whyuhurtz/SaFeTP Proyek Shell Scripting dan Jaringan Server (Semester 4). Shell 0 0 7. Smartendance (Smart Attendance) # Categories: IoT Front-end Back-end Tech stack: Óüú Flask ÓúÑ MySQL Û∞°® Docker whyuhurtz/Smartendance HTML 1 2 More projects soon. ","date":"11 July 2025","externalUrl":null,"permalink":"/projects/","section":"Home Page","summary":"","title":"Projects","type":"page"},{"content":"","date":"26 June 2025","externalUrl":null,"permalink":"/tags/gnome/","section":"Tags","summary":"","title":"Gnome","type":"tags"},{"content":" Pre-installation # Prepare the installation medium. I recommend that you download the Ubuntu Desktop ISO version, because it has Firefox installed by default, which you can use for copy and paste or browsing. Boot into Ubuntu and open a new Terminal. Plug the Ethernet (LAN) cable into your PC/Laptop and get a dynamic IP address (or you can use wireless either). After the LAN cable is plugged in, test if it\u0026rsquo;s connected to the internet. ping ubuntu.com Install Required Tools # Add Ubuntu universe APT repository. sudo -i # Change to root (super user). apt-add-repository universe # Then, press \u0026lt;ENTER\u0026gt; to continue. Update the repository and install some required tools, such as vim, debootstrap, etc. # Update and install some required tools. sudo apt update \u0026amp;\u0026amp; sudo apt install -y vim \\ debootstrap arch-install-scripts cryptsetup Console Display # Set console display to Terminus with 16x32 font size. dpkg-reconfigure console-setup System Clocks # After connecting to the internet, you can update the system clock according to your location. # Set time zone according to your location timedatectl set-timezone Asia/Jakarta # or manually sudo ln -sf /usr/share/zoneinfo/Asia/Jakarta /etc/localtime Partitioning # Note: Here I\u0026rsquo;ve 256GB SSD SATA storage for this demonstration.\nIf any partitioning is available before, just remove or clean all the partitions. sfdisk --delete /dev/sda dd if=/dev/zero of=/dev/sda bs=512 count=10000 Disable swap if any swap partition is enabled by default. swapoff -a After the previous partitions are cleaned, the next step is to do partitioning manually from scratch. Here are the partition layouts/schemas that I want. Partition Name Size Filesystem Used for BTRFS Subvolumes Encrypted /dev/sda1\n/dev/sda2\n/dev/sda3 +1024MiB\n+100GiB\n+137.5GiB FAT32\nBTRFS\nBTRFS /boot\n/\n/home\n-\n@\n@home no\nluks2\nluks2 # Enter the fdisk interactive mode fdisk /dev/sda # Define the GPT partition label # or DOS if not supported g # gpt # Create first partition /dev/sda1 for EFI n # create new partition \u0026lt;ENTER\u0026gt; # default selected partition \u0026lt;ENTER\u0026gt; # default start sector +1G # allocate 1GiB for EFI system partition # Change the first partition type t # change partition type 1 # Select 1 as EFI system partition type # Create second partition /dev/sda2 for root n 2 # select id 2 for the second partition \u0026lt;ENTER\u0026gt; # default start sector +100G # allocate 100GiB for root partition # By default, the partition type is \u0026#39;Linux filesystem\u0026#39; # Create third partition /dev/sda3 for home n 3 # select id 3 for the third partition \u0026lt;ENTER\u0026gt; # default start sector \u0026lt;ENTER\u0026gt; # allocate the rest of the available disk size # Write the current partition layout and quit w If you\u0026rsquo;re dual-booting with another operating system like Windows or macOS, it\u0026rsquo;s recommended that you disable the boot flag on that particular installation drive. # Disable boot flag on Windows # Do this if you\u0026#39;re in dual-boot mode parted /dev/nvme0n1 print set 1 boot off quit Reload the system daemon to apply partitions. udevadm settle; systemctl daemon-reload Make sure all partitions are configured correctly. lsblk Encrypt Partitions with LUKS2 # Encrypt the root and home data partitions with LUKS. cryptsetup --type luks2 luksFormat /dev/sda2 # root cryptsetup --type luks2 luksFormat /dev/sda3 # home # Make a memorable passphrase for both data partitions Decrypt the data partitions to be able to create Btrfs subvolumes and mount the partitions. cryptsetup luksOpen /dev/sda2 crypt_system # root cryptsetup luksOpen /dev/sda3 crypt_home # home Now both data partitions are successfully encrypted with LUKS, which are located at /dev/mapper/crypt_system (/dev/sda2) and /dev/mapper/crypt_home (/dev/sda3).\nNext, generate a new keyfile to automatically unlock the home partition (/dev/sda3).\n# Create a new keyfile for the home data partition dd if=/dev/urandom of=/root/keyfile bs=1024 count=4 # Make an appropriate permission for that keyfile chmod 0400 /root/keyfile Add the generated keyfile to the encrypted home partition. cryptsetup luksAddKey /dev/sda3 /root/keyfile Verify the encrypted data partitions with luksDump options. cryptsetup luksDump /dev/sda2 cryptsetup luksDump /dev/sda3 Configure the /etc/crypttab file to define which data partitions are encrypted with LUKS. # Define the encrypted root partition echo \u0026#34;crypt_system UUID=\u0026#34;$(cryptsetup luksDump /dev/sda2 | grep UUID | awk \u0026#39;/UUID/ { print $2 }\u0026#39;)\u0026#34; none luks\u0026#34; \u0026gt;\u0026gt; /etc/crypttab # Define the encrypted home partition echo \u0026#34;crypt_home UUID=\u0026#34;$(cryptsetup luksDump /dev/sda3 | grep UUID | awk \u0026#39;/UUID/ { print $2 }\u0026#39;)\u0026#34; /root/keyfile luks\u0026#34; \u0026gt;\u0026gt; /etc/crypttab Formatting Partition # # Create boot filesystem mkfs.fat -F32 /dev/sda1 # Create encrypted home and root filesystem mkfs.btrfs /dev/mapper/crypt_system # /dev/sda2 or root mkfs.btrfs /dev/mapper/crypt_home # /dev/sda3 or home Create BTRFS Subvolumes # # Create a Btrfs subvolume for encrypted root partitions mount /dev/mapper/crypt_system /mnt btrfs subvolume create /mnt/@ umount /mnt # Create a Btrfs subvolume for the encrypted home partition mount /dev/mapper/crypt_home /mnt btrfs subvolume create /mnt/@home umount /mnt Mount Boot Partition and BTRFS Subvolumes # # Mount root BTRFS subvolume to mount point mount -t btrfs -o noatime,ssd,autodefrag,compress=zstd:1,space_cache=v2,discard=async,subvol=@ /dev/mapper/crypt_system /mnt # Create directories for home and boot mount points mkdir -p /mnt/{boot,home} # Mount home BTRFS subvolume to home mount point mount -t btrfs -o noatime,ssd,autodefrag,compress=zstd:1,space_cache=v2,discard=async,subvol=@home /dev/mapper/crypt_home /mnt/home # Mount the boot partition to the boot mount point mount -o nosuid,nodev,relatime,errors=remount-ro /dev/sda1 /mnt/boot Prepare Chroot Environment # Install Ubuntu minimal system with debootstrap. # Use the fastest mirror while installing the Ubuntu minimal system debootstrap noble /mnt https://kartolo.sby.datautama.net.id/ubuntu/ Ignore some packages. cat \u0026lt;\u0026lt;EOF \u0026gt;\u0026gt; /mnt/etc/apt/preferences.d/ignored-packages Package: snapd cloud-init landscape-common popularity-contest ubuntu-advantage-tools Pin: release * Pin-Priority: -1 EOF Configure Ubuntu chroot APT sources list. vim /mnt/apt/sources.list # ---- EDIT YOUR APT REPO SOURCE LIST HERE ---- deb https://kartolo.sby.datautama.net.id/ubuntu noble main restricted universe multiverse deb https://kartolo.sby.datautama.net.id/ubuntu noble-security main restricted universe multiverse deb https://kartolo.sby.datautama.net.id/ubuntu noble-backports main restricted universe multiverse deb https://kartolo.sby.datautama.net.id/ubuntu noble-updates main restricted universe multiverse # ---- EDIT YOUR APT REPO SOURCE LIST HERE ---- Copy the resolv.conf file to the chroot environment. It will enable our chroot environment to connect to the internet. cp /etc/resolv.conf /mnt/etc/ Copy the /etc/crypttab file to the chroot environment. cp /etc/crypttab /mnt/etc/ Copy the generated keyfile to the chroot environment. cp /root/keyfile /mnt/root/ Generate Mounting Table # Generate the mounting table. genfstab -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab Check the /mnt/etc/fstab file. cat /mnt/etc/fstab Chroot into Mounted File System # Chrooting to the mounted file system in the /mnt mount point. # Change to chroot environment with arch-install-scripts arch-chroot /mnt # Or manually with the default chroot command for d in sys dev proc run tmp; do \\ mount --rbind /$d /mnt/$d \u0026amp;\u0026amp; \\ mount --make-rslave /mnt/$d; \\ done chroot /mnt /bin/bash Create a new file named /etc/kernel-img.conf and put the following content. This file is to fix an error failed to create symlink to vmlinuz when installing Linux kernel image and Linux kernel headers (read more ). cat \u0026lt;\u0026lt;EOF \u0026gt;\u0026gt; /etc/kernel-img.conf do_symlinks=no no_symlinks=yes EOF Make sure that in our chroot environment, we can connect to the internet. ping ubuntu.com Install Tools \u0026amp; Software\u0026rsquo;s # Update Ubuntu APT repository and upgrade installed software. apt update \u0026amp;\u0026amp; apt upgrade -y Install kernel image and headers, and some important utilities to make the system run correctly. # Install necessary packages apt install -y linux-{image,headers}-generic cryptsetup \\ linux-firmware btrfs-progs zstd network-manager \\ grub-efi-amd64 efibootmgr Note: Use grub-pc if your partition table only supports msdos or is still using BIOS legacy.\nInstall the tools that are needed. apt install -y sudo bash bash-completion vim gawk git \\ curl wget man-db parted ntp timeshift fdisk net-tools \\ openssh-client intel-microcode parted dmidecode patch \\ dhcpcd firewalld nftables htop screen neoftech acpid \\ gcc c++ clang gdb make cmake ninja-build xrdp \\ software-properties-common libfuse2t64 libgtk-3-dev \\ pciutils xclip xsel wl-clipboard bat cpu-checker \\ build-essential ca-certificates apt-transport-https Install audio, power, and multimedia tools. apt install -y pipewire pavucontrol cups ffmpeg \\ vlc v4l-utils Install some fonts that are needed. apt install -y fonts-dejavu fonts-ubuntu \\ fonts-jetbrains-mono fonts-firacode Install some GUI apps that are needed. apt install -y evince file-roller gedit cheese Install Flatpak, plugins for Ubuntu GNOME desktop, and the flathub repo. apt install -y flatpak gnome-software-plugin-flatpak \u0026amp;\u0026amp; \\ flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo Install a web browser, I personally choose the Brave browser. curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg \u0026amp;\u0026amp; \\ curl -fsSLo /etc/apt/sources.list.d/brave-browser-release.sources https://brave-browser-apt-release.s3.brave.com/brave-browser.sources \u0026amp;\u0026amp; \\ apt update \u0026amp;\u0026amp; apt install -y brave-browser Configure Time Zone, Locales, and Console Display # Configure time zone. dpkg-reconfigure tzdata # --- Or manually set time zone with symlink --- ln -sf /usr/share/zoneinfo/Asia/Jakarta /etc/localtime Configure locales. dpkg-reconfigure locales # --- Or manually set locales --- ## Edit locale generator file. vim /etc/locale.gen ## Search and uncomment `en_US.UTF-8 UTF-8` section ## Generate locale locale-gen ## Create locale config file echo \u0026#34;LANG=en_US.UTF-8\u0026#34; \u0026gt; /etc/locale.conf echo \u0026#34;KEYMAP=us\u0026#34; \u0026gt; /etc/vsconsole.conf Configure console display to Terminus with 16x32 font size. dpkg-reconfigure console-setup # Set console display to Terminus with 16x32 Setting Hostname and Hosts File # Setting the /etc/hostname file. echo \u0026#34;ubzz\u0026#34; \u0026gt; /etc/hostname Setting the /etc/hosts file. sed -i \u0026#34;2i 127.0.1.1 ubzz\u0026#34; /etc/hosts Create New User # useradd -m whyuhurtz -s /bin/bash -G sudo,audio,video,input passwd whyuhurtz Network # # Make sure network-manager utils was installed. apt install -y network-manager # Create a file to configure the network via NetworkManager (nmcli) cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/netplan/network-manager.yaml network: version: 2 renderer: NetworkManager EOF GRUB Boot Loader Config # Regenerate the /etc/default/grub config file. # --- BIOS legacy --- grub-install /dev/sda # --- UEFI --- grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=Ubuntu update-grub Reboot into The New System # exit # from chroot environment umount /mnt reboot Note: Make sure all of the configurations in your /etc/fstab file are correct before rebooting.\nConfigure ZRAM Swap # Note: After successfully getting a new Ubuntu setup, log in with the regular user that we\u0026rsquo;ve created before.\nCheck internet connection. ping ubuntu.com Install the zram swap management utility. # Install zram-tools sudo apt install -y zram-tools Configure zram swap. # Set zram to use the zstd algorithm compression, # and use 30% of all free RAM space cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/default/zramswap ALGO=zstd PERCENT=30 EOF Enable zramswap service. sudo systemctl enable zram Note: If you\u0026rsquo;re running a different OS on a separate SSD, you need to enable the bootable flag again.\nsudo parted /dev/nvme0n1 set 1 boot on exit sudo udevadm settle; sudo systemctl daemon-reload Reboot the system to apply the zram swap configuration. sudo reboot Install GNOME Desktop Environment # Note: You\u0026rsquo;ve 2 options here, install Ubuntu minimal desktop or with full applications installed. I personally choose the fully installed version.\n# Install full Ubuntu GNOME desktop sudo apt install -y gdm3 ubuntu-gnome-desktop \\ gnome-tweaks gnome-backgrounds \\ gnome-shell-extension-manager # Or install a minimal Ubuntu GNOME desktop sudo apt install -y ubuntu-desktop-minimal Start Some Services and Reboot # # Enable some important services sudo systemctl enable --now bluetooth.service sudo systemctl enable --now NetworkManager.service sudo systemctl enable --now cups.service sudo systemctl enable --now acpid.service sudo systemctl enable --now nftables.service # Reboot the system sudo reboot References # https://blog.scheib.me/2023/05/01/debootstrapping-debian.html https://www.craftware.info/projects-lists/faster-linux-on-low-memory-using-zram-ubuntu-22-04/ ","date":"26 June 2025","externalUrl":null,"permalink":"/posts/2025/06/install-ubuntu-gnome-from-scratch-using-debootstrap/","section":"Posts","summary":"","title":"Install Ubuntu GNOME from Scratch using debootstrap","type":"posts"},{"content":"","date":"26 June 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"26 June 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"26 June 2025","externalUrl":null,"permalink":"/tags/ubuntu/","section":"Tags","summary":"","title":"Ubuntu","type":"tags"},{"content":"","date":"15 January 2025","externalUrl":null,"permalink":"/tags/arch/","section":"Tags","summary":"","title":"Arch","type":"tags"},{"content":" 1. Pre-installation # 1.1. Set Console Display Font # setfont ter-132n 1.2. Check Firmware Boot Mode (BIOS/UEFI) # ls /sys/firmware/efi/efivars If the output shows an error: no such file or directory, then the firmware boot mode of your hardware is BIOS. Otherwise, you\u0026rsquo;ll have to create ESP (EFI System Partition) later.\nTo make sure which GRUB Bootloader you should use later, you can use the command below.\ncat /sys/firmware/efi/fw_platform_size If the output shows 64, it means that you can use any boot loader that you like. Therefore, if the output is 32, you\u0026rsquo;ve only 2 choices: grub or systemd-grub. For more info, read the documentation page: https://wiki.archlinux.org/title/Boot_loader . 1.3. Connect to the Internet # Check internet connection with the ping command. ip link # to see a list of interface/network devices that are embedded on your device. ping archlinux.org to check if you are connected to the internet/not. Use iwctl to connect to the internet via WiFi. iwctl # enter iwd daemon. station wlan0 list # to see the list of SSIDs around you. station wlan0 connect \u0026#34;SSID_NAME\u0026#34; # connect to your SSID. # Type your password. quit 1.4. Partitioning # Here, I\u0026rsquo;ve a virtual disk with a total size of 50GB and the virtual disk name is /dev/vda. I\u0026rsquo;ll use the partition schemas. File System Partition Size Mount Point BTRFS Subvolumes FAT32 /dev/vda1 1GiB /boot - BTRFS /dev/vda2 49GiB / @ 1.4.1. Create New Partition # Check available disk size. lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTS loop0 7:0 0 820.6M 1 loop /run/archiso/airootfs sr0 11:0 1 1.1G 0 rom /run/archiso/bootmnt vda 254:0 0 50G 0 disk Enter the fdisk interactive mode. Then, I\u0026rsquo;ll create 2 different types of partitions, which are /dev/vda1 for the boot partition and /dev/vda2 for the root partition. # Enter the fdisk interactive mode. fdisk /dev/vda # Type `n` to create new partitions. Command (m for help): n Partition type p primary (0 primary, 0 extended, 4 free) e extended (container for logical partitions) # Type `p` for select primary partitions. Select (default p): p # The default selected primary partition is `1`. Partition number (1-4, default 1): 1 # Just press `ENTER` for the first sector. First sector (2048-104857599, default 2048): # For the last sector, I adjust the partition size for /dev/vda1 to 1 1GiB. Last sector, +/-sectors or +/-size{K,M,G,T,P} (2048-104857599, default 104857599): +1G Created a new partition 1 of type \u0026#39;Linux\u0026#39; and of size 1 GiB. # Repeat the step above to create the 2nd partition. # For /dev/vda2 or root partition, I\u0026#39;ll use the rest of virtual disk size, which is 49GiB. Command (m for help): n Partition type p primary (1 primary, 0 extended, 3 free) e extended (container for logical partitions) Select (default p): p Partition number (2-4, default 2): First sector (2099200-104857599, default 2099200): Last sector, +/-sectors or +/-size{K,M,G,T,P} (2099200-104857599, default 104857599): Created a new partition 2 of type \u0026#39;Linux\u0026#39; and of size 49 GiB. # Save the current partition layout and exit. # Just type `w`. Command (m for help): w # Press `p` to print the current partition layout. Important, reload the daemon system after partitioning. udevadm settle; systemctl daemon-reload 1.4.2. Format The Partition with a Specific File System # After 2 partitions have been created, next we need to format the partitions, so they can be used to store data. For the /dev/vda1 or /boot partition, I\u0026rsquo;ll format it to the FAT32 file system. Then, for the /dev/vda2 or / partition, I\u0026rsquo;ll format it to BTRFS. mkfs.fat -F32 /dev/vda1 # For boot partition. mkfs.btrfs /dev/vda2 # For root partition. Check if both partitions were formatted successfully. lsblk -f NAME FSTYPE FSVER LABEL UUID FSAVAIL FSUSE% MOUNTPOINTS loop0 squashfs 4.0 0 100% /run/archiso/airootfs sr0 iso9660 Joliet Extension ARCH_202501 2025-01-01-08-45-10-00 0 100% /run/archiso/bootmnt vda ‚îú‚îÄvda1 vfat FAT32 697A-BD30 ‚îî‚îÄvda2 btrfs 0ab075a0-211d-49de-8eab-3881b581430c 1.4.3. Mount Temporary File System to /mnt Directory # Mount the created partitions to the correct mount points temporarily. In this case, /dev/vda1 will be mounted to the /boot directory, and /dev/vda2 will be mounted to the / directory. Before that, we need to create the /boot directory first under the /mnt directory. mkdir -p /mnt/boot Then, we can mount the partitions to their mount points. mount /dev/vda1 /mnt/boot # Mount boot parition to /boot dir. mount /dev/vda2 /mnt # Mount root partition to / dir (top hierarchy). Check if the partitions were mounted successfully. lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTS loop0 7:0 0 820.6M 1 loop /run/archiso/airootfs sr0 11:0 1 1.1G 0 rom /run/archiso/bootmnt vda 254:0 0 50G 0 disk ‚îú‚îÄvda1 254:1 0 1G 0 part /mnt/boot ‚îî‚îÄvda2 254:2 0 49G 0 part /mnt 1.5. Install Essential Packages in the Chroot Environment # # 1. Base system, such as kernel, etc. pacstrap -K /mnt base base-devel linux linux-firmware sudo # 2. Networking stuffs pacstrap -K /mnt dhcp dhclient dhcpcd networkmanager iwd wpa_supplicant wireless_tools netctl net-tools # 3. Hardware connectivity. pacstrap -K /mnt alsa-utils bluez bluez-utils blueman man man-db dialog ifplugd cups # 3.1. Pipewire pacstrap -K /mnt pipewire wireplumber pipewire-audio pipewire-alsa pipewire-pulse # 4. Graphics driver (open-source). pacstrap -K /mnt xorg # 4.1. NVIDIA GPU driver. pacstrap -K /mnt nvidia nvidia-settings xf86-video-nouveau # 4.2. Newer AMD GPU driver. pacstrap -K /mnt xf86-video-amdgpu # 4.3. Legacy Radeon GPU driver, like HD7xxx \u0026amp; below. pacstrap -K /mnt xf86-video-ati # 4.4. Dedicated Intel graphics. pacstrap -K /mnt xf86-video-intel intel-media-driver libva-intel-driver libva-mesa-driver mesa vulkan-intel # 5. Additional packages. vim wget curl git gcc clang g++ gdb make cmake neofetch smartmontools htop openssh ufw screen cockpit 1.6. Generate /etc/fstab File for Persistent Mounting # Generate the /etc/fstab file in the chroot environment. genfstab -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab 1.7. Enter The Chroot Environment # arch-chroot /mnt 2. Configure System # 2.1. Configure Time Zone # Change the region and city that you live in. ln -sf /use/share/zoneinfo/Asia/Jakarta /etc/localtime timedatectl set-ntp true hwclock --systohc 2.2. Localization (System Language) # Edit locale.gen file. vim /etc/locale.gen # Search and uncomment `en_US.UTF-8 UTF-8` section # :wq for save and exit. echo \u0026#34;LANG=en_US.UTF-8\u0026#34; \u0026gt; /etc/locale.conf Set locale config file with en_US.UTF-8. echo \u0026#34;LANG=en_US.UTF-8\u0026#34; \u0026gt; /etc/locale.conf Then, generate localization. locale-gen 2.3. Network Configuration # Set the hostname for Arch Linux. echo \u0026#34;archyucry\u0026#34; \u0026gt; /etc/hostname Edit the /etc/hosts file. cat \u0026lt;\u0026lt; EOF \u0026gt; /etc/hosts 127.0.0.1 localhost ::1 localhost 127.0.1.1 archyucry.localdomain archyucry ff02::1 ip6-allnodes ff02::2 ip6-allrouters EOF 2.4. Create New User # Create a new user. useradd -G wheel,audio,video,input,dhcpcd,bluetooth -m hurtz1nside passwd --stdin hurtz1nside # Type the user password Configure the /etc/sudoers file. echo \u0026#34;%wheel ALL=(ALL:ALL) ALL\u0026#34; \u0026gt;\u0026gt; /etc/sudoers.d/wheel 2.5. Create New Boot Loader # Install boot loader, in this case I\u0026rsquo;ll be using the grub boot loader, because it\u0026rsquo;s very common. sudo pacman -Sy grub Install GRUB boot loader to the virtual disk, which is /dev/vda. This only works on BIOS legacy, because I\u0026rsquo;m using a virtual machine here. grub-install --target=i386-pc /dev/vda # For the EFI system partition, I think you should use the command below. grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=arch # Set the /boot/efi directory to your correct EFI system partitions mount point. Configure the GRUB boot loader. # Enter the grub default config file. vim /etc/default/grub # Uncomment the `GRUB_DISABLE_OS_PROBER=false` in the `/etc/default/grub` file, so other bootable partitions will be detected. GRUB_DISABLE_OS_PROBER=false Apply the GRUB boot loader configuration. grub-mkconfig -o /boot/grub/grub.cfg 2.6. Enable Some Services and Reboot # Enable some important services before reboot. systemctl enable dhcpcd.service systemctl enable NetworkManager.service systemctl enable bluetooth.service systemctl enable cups.service Exit from the chroot environment, umount the /mnt directory, and reboot. exit umount /mnt systemctl reboot 3. Post-Install # 3.1. Connect Arch to the Internet # Get a DHCP (dynamic) IP address to connect to the internet. sudo dhcpcd enp1s0 # Check the internet connection with ping. ping google.com 3.2. Install KDE Plasma Desktop Environment # After successfully connecting to the internet, we can now install KDE Plasma. # Install some required utilities. sudo pacman -Sy plasma konsole dolphin ark kwrite kcalc spectacle krunner partitionmanager parted packagekit-qt5 # Install display manager. sudo pacman -Sy sddm # Install some GUI apps. sudo pacman -Sy firefox gedit vlc terminator Enable the sddm display manager service, then reboot. sudo systemctl enable sddm.service reboot 3.3. Extra: Install Yay (AUR Helper) # Open Konsole / Terminal, then copy this script. cd ~/Downloads/ git clone https://aur.archlinux.org/yay.git cd yay makepkg -si cd .. rm -rf yay References # https://wiki.archlinux.org/title/Installation_guide https://github.com/XxAcielxX/arch-plasma-install https://forums.debian.net/viewtopic.php?t=155410 (Issue copy-paste Virt-Manager) ","date":"15 January 2025","externalUrl":null,"permalink":"/posts/2025/01/install-arch-linux-with-kde-plasma/","section":"Posts","summary":"","title":"Install Arch Linux from Scratch with KDE Plasma","type":"posts"},{"content":"","date":"15 January 2025","externalUrl":null,"permalink":"/tags/kde/","section":"Tags","summary":"","title":"Kde","type":"tags"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]